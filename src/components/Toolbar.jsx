import { useState, useEffect } from 'react';
import './Toolbar.css';

export const Toolbar = () => {
  const [expanded, setExpanded] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [fontFamily, setFontFamily] = useState('sans-serif');
  const [highContrast, setHighContrast] = useState(false);
  const [imagesHidden, setImagesHidden] = useState(false);
  const [language, setLanguage] = useState('ru');

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    document.documentElement.style.setProperty('--font-size', `${fontSize}px`);
    document.documentElement.style.fontFamily = fontFamily;
    
    if (darkMode) {
      document.documentElement.classList.add('dark-theme');
      document.documentElement.classList.remove('light-theme');
    } else {
      document.documentElement.classList.add('light-theme');
      document.documentElement.classList.remove('dark-theme');
    }

    if (highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }

    document.querySelectorAll('img').forEach(img => {
      img.style.display = imagesHidden ? 'none' : '';
    });

    localStorage.setItem('toolbarSettings', JSON.stringify({
      darkMode,
      fontSize,
      fontFamily,
      highContrast,
      imagesHidden
    }));
  }, [darkMode, fontSize, fontFamily, highContrast, imagesHidden]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —á–µ—Ä–µ–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    document.documentElement.style.setProperty('--font-size-base', `${fontSize}px`);
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...
    document.documentElement.style.fontFamily = fontFamily;
    
    if (darkMode) {
      document.documentElement.classList.add('dark-theme');
      document.documentElement.classList.remove('light-theme');
    } else {
      document.documentElement.classList.add('light-theme');
      document.documentElement.classList.remove('dark-theme');
    }
  
    if (highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }
  
    document.querySelectorAll('img').forEach(img => {
      img.style.display = imagesHidden ? 'none' : '';
    });
  
    localStorage.setItem('toolbarSettings', JSON.stringify({
      darkMode,
      fontSize,
      fontFamily,
      highContrast,
      imagesHidden
    }));
  }, [darkMode, fontSize, fontFamily, highContrast, imagesHidden]);

  const handleLanguageChange = (lang) => {
    setLanguage(lang);
    console.log('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', lang);
  };

  return (
    <div className={`floating-toolbar ${expanded ? 'expanded' : ''}`}>
      {/* –ö–Ω–æ–ø–∫–∞-–∏–∫–æ–Ω–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è */}
      <button className="toolbar-toggle" onClick={() => setExpanded(!expanded)}>
        {expanded ? '‚úï' : '‚öôÔ∏è'}
      </button>
      
      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ */}
      <div className="toolbar-content">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏</h3>
        
        <div className="toolbar-section">
          <label className="toggle-switch">
            <input 
              type="checkbox" 
              checked={darkMode} 
              onChange={(e) => setDarkMode(e.target.checked)} 
            />
            <span className="slider round"></span>
            <span className="toggle-label">–¢—ë–º–Ω–∞—è —Ç–µ–º–∞</span>
          </label>
        </div>
        
        <div className="toolbar-section">
          <label>–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {fontSize}px</label>
          <div className="font-size-controls">
            <button 
              className="size-btn" 
              onClick={() => setFontSize(prev => Math.max(12, prev - 1))}
            >
              A-
            </button>
            <span className="font-size-value">{fontSize}px</span>
            <button 
              className="size-btn" 
              onClick={() => setFontSize(prev => Math.min(24, prev + 1))}
            >
              A+
            </button>
          </div>
        </div>
        
        <div className="toolbar-section">
          <label>–®—Ä–∏—Ñ—Ç:</label>
          <select
            value={fontFamily}
            onChange={(e) => setFontFamily(e.target.value)}
            className="font-select"
          >
            <option value="sans-serif">–ë–µ–∑ –∑–∞—Å–µ—á–µ–∫</option>
            <option value="serif">–° –∑–∞—Å–µ—á–∫–∞–º–∏</option>
            <option value="monospace">–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</option>
          </select>
        </div>
        
        <div className="toolbar-section">
          <label className="toggle-switch">
            <input 
              type="checkbox" 
              checked={highContrast} 
              onChange={(e) => setHighContrast(e.target.checked)} 
            />
            <span className="slider round"></span>
            <span className="toggle-label">–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç</span>
          </label>
        </div>
        
        <div className="toolbar-section">
          <label className="toggle-switch">
            <input 
              type="checkbox" 
              checked={imagesHidden} 
              onChange={(e) => setImagesHidden(e.target.checked)} 
            />
            <span className="slider round"></span>
            <span className="toggle-label">–°–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>
          </label>
        </div>
        
        <div className="toolbar-section">
          <label>–Ø–∑—ã–∫:</label>
          <select
            value={language}
            onChange={(e) => handleLanguageChange(e.target.value)}
            className="lang-select"
          >
            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
            <option value="en">English</option>
          </select>
        </div>
      </div>
    </div>
  );
};

/*
import { useState, useEffect } from 'react';
import './Toolbar.css';

export const Toolbar = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [darkMode, setDarkMode] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [fontFamily, setFontFamily] = useState('sans-serif');
  const [highContrast, setHighContrast] = useState(false);
  const [imagesHidden, setImagesHidden] = useState(false);
  const [language, setLanguage] = useState('ru');

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    document.documentElement.style.setProperty('--font-size-base', `${fontSize}px`);
  
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    if (darkMode) {
      document.documentElement.classList.add('dark-theme');
      document.documentElement.classList.remove('light-theme');
    } else {
      document.documentElement.classList.add('light-theme');
      document.documentElement.classList.remove('dark-theme');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    if (highContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç
    document.documentElement.style.fontFamily = fontFamily;
    document.documentElement.style.fontSize = `${fontSize}px`;

    // –°–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    document.querySelectorAll('img').forEach(img => {
      img.style.display = imagesHidden ? 'none' : '';
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    localStorage.setItem('toolbarSettings', JSON.stringify({
      darkMode,
      fontSize,
      fontFamily,
      highContrast,
      imagesHidden
    }));
  }, [darkMode, fontSize, fontFamily, highContrast, imagesHidden]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedSettings = localStorage.getItem('toolbarSettings');
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      setDarkMode(settings.darkMode || false);
      setFontSize(settings.fontSize || 16);
      setFontFamily(settings.fontFamily || 'sans-serif');
      setHighContrast(settings.highContrast || false);
      setImagesHidden(settings.imagesHidden || false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  const handleLanguageChange = (lang) => {
    setLanguage(lang);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    console.log('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', lang);
  };

  return (
    <div className="toolbar-container">
      <div className="toolbar">
        {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã }
        <button
          onClick={() => setDarkMode(!darkMode)}
          className={`toolbar-btn ${darkMode ? 'active' : ''}`}
          title={darkMode ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'}
        >
          {darkMode ? '‚òÄÔ∏è' : 'üåô'}
        </button>

        {/* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ }
        <div className="toolbar-group">
          <button
            onClick={() => setFontSize(prev => Math.max(12, prev - 1))}
            className="toolbar-btn"
            title="–£–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç"
          >
            A-
          </button>
          <span className="font-size-display">{fontSize}px</span>
          <button
            onClick={() => setFontSize(prev => Math.min(24, prev + 1))}
            className="toolbar-btn"
            title="–£–≤–µ–ª–∏—á–∏—Ç—å —à—Ä–∏—Ñ—Ç"
          >
            A+
          </button>
        </div>

        {/* –¢–∏–ø —à—Ä–∏—Ñ—Ç–∞ }
        <select
          value={fontFamily}
          onChange={(e) => setFontFamily(e.target.value)}
          className="toolbar-select"
          title="–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç"
        >
          <option value="sans-serif">–ë–µ–∑ –∑–∞—Å–µ—á–µ–∫</option>
          <option value="serif">–° –∑–∞—Å–µ—á–∫–∞–º–∏</option>
          <option value="monospace">–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</option>
        </select>

        {/* –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å }
        <button
          onClick={() => setHighContrast(!highContrast)}
          className={`toolbar-btn ${highContrast ? 'active' : ''}`}
          title="–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å"
        >
          üëÅÔ∏è
        </button>

        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è }
        <button
          onClick={() => setImagesHidden(!imagesHidden)}
          className={`toolbar-btn ${imagesHidden ? 'active' : ''}`}
          title={imagesHidden ? '–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–°–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
        >
          {imagesHidden ? 'üñºÔ∏èüëÅÔ∏è' : 'üñºÔ∏èüö´'}
        </button>

        {/* –Ø–∑—ã–∫ }
        <select
          value={language}
          onChange={(e) => handleLanguageChange(e.target.value)}
          className="toolbar-select"
          title="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
        >
          <option value="ru">–†—É—Å—Å–∫–∏–π</option>
          <option value="en">English</option>
        </select>
      </div>
    </div>
  );
};

*/